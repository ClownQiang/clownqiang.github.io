<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ClownQiang的日常]]></title>
  <link href="http://ClownQiang.github.io/atom.xml" rel="self"/>
  <link href="http://ClownQiang.github.io/"/>
  <updated>2016-08-15T14:14:30+08:00</updated>
  <id>http://ClownQiang.github.io/</id>
  <author>
    <name><![CDATA[ClownQiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[~2015~]]></title>
    <link href="http://ClownQiang.github.io/blog/2016/01/01/zhong_jie/"/>
    <updated>2016-01-01T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2016/01/01/zhong_jie</id>
    <content type="html"><![CDATA[<hr />

<p>最近刷知乎，早几天开始就已经满屏幕的2015总结等相关问题。相比过去，今年过的更加让我琢磨不透，还没等我好好喘口气，2016就过来了，是啊又过去了，而且我也快毕业了~ </p>

<p>“生活不易”，这个大概是我2015最“痛”的回忆。从年初过来后的，满怀信心，随着时间一刀刀削掉我的棱角，到了年中，我似乎没有什么好骄傲的了。在海投简历之后，找到一份相对不错的实习，带着剩下的信心来到上海。以为时间会帮我调节一切，但是内心却越来越焦虑，以至于最难受时每天要死命的在大马路上骑车，直到自己疲惫不堪再回到家中。生活上的单调，加上本身心态波折，我第一次感觉自己这么的力不从心，我不断问自己“我到底需要的是什么”，或者是“我究竟为了什么要这样走下去”，或许二十几年一直没有答案的问题，现在反弹了。即使我让自己借助弹吉他，玩手工，骑车等活动改变心态，但是无济于事。</p>

<p>时间很快来到了十一月，我感觉自己似乎支撑不下去了，提前一个月，我提出了辞职。完后，我来到窗前，看着马路上忙碌的人，一段时间我感觉自己每天就这样走在几条线上，想到后面几年甚至一辈子都可能是这种生活，我就有点后怕。从未这样观察过其他人的生活，这种感觉很奇妙，大家都来来往往的走着，也不知道终点在哪里。</p>

<p>生活貌似好起来了一点，自己又开始收集乐趣了，迷茫期时爱上了摇滚，耳机总是动次打次，就喜欢那种不爽就吼出来；没事也会去书店看看书，当然漫画书也是有的。生活不经意间又添了一些颜色，或许人生很多东西就是“得而复失，失而复得”。</p>

<p>十二月，到了要离开上海的时候。大家吃了饭，说了些话，然后离开了。记得吃饭时，我说了一句“都是缘分！”，CEO也回了一句“都是缘分”。</p>

<p>回到学校，仿佛一切都是新的一样，心里一阵莫名的感动，一晃眼已经过去三年半。自己已经不像大一，可以几个室友冬天满学校找有空调的地方学习；也不像大二，可以和一群人围在显示器前讨论如何给大一学弟上课；也不像大三，可以说着“我还有一年”。我能做的也只有一边怀念过去，一边继续解答心里的问号，或许未来会更好。</p>

<p>最后想起在上海的某个下午，天气很好，阳光不骄不躁，我推着车上了轮渡，对面的高楼映着阳光，我靠在车上，懒懒的看着那楼，耳机里放着的是《钟鼓楼》，唱的正是那句“是谁出的题这么的难，到处全都是正确答案”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生活的馈赠（三）]]></title>
    <link href="http://ClownQiang.github.io/blog/2015/11/16/life_gift_three/"/>
    <updated>2015-11-16T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2015/11/16/life_gift_three</id>
    <content type="html"><![CDATA[<p>今天是11月16日，下着小雨，明天郑凯同时就要走了。
好长时间不看《一席》了，翻出来看到一个新视频顶的很高，叫《追求自由的亡命徒》，一个老爷爷，王德顺，79岁。演讲看的我的身子一震，发现自己还是那么懦弱，最后白桦的诗《船》，犹如一颗流星砸在我身上。记下来，算是我这段麻木时光的一个印记。</p>

<p><strong>《船》白桦 </strong><br/>
我有过多次这样的奇遇，<br/>
从天堂到地狱只在瞬息之间；<br/>
每一朵可爱、温柔的浪花，<br/>
都成了突然崛起、随即倾倒的高山。</p>

<p>每一滴海水都变脸变色，<br/>
刚刚还是那样美丽、蔚蓝；<br/>
旋涡纠缠着旋涡，<br/>
我被抛向高空又投进深渊……</p>

<p>当时我甚至想到过轻生，<br/>
眼前一片苦海无边；<br/>
放弃了希望就象放弃了舵柄，<br/>
在暴力之下只能沉默和哀叹。</p>

<p>今天我才有资格嘲笑昨天的自己，<br/>
为昨天落叶似的惶恐感到羞惭；<br/>
虚度了多少年华，<br/>
船身多次被礁石撞穿……</p>

<p>千万次在大洋里撒网，<br/>
才捕获到一点点生活的经验，<br/>
才恍然大悟，<br/>
啊！道理原是如此浅显：</p>

<p>你要航行吗？<br/>
必然会有千妖百怪出来阻拦；<br/>
暴虐的欺凌是它们的游戏，<br/>
制造灭亡是它们唯一的才干。</p>

<p>命中注定我要常常和它们相逢，<br/>
因为我的名字叫做船；<br/>
面对强大于自身千万倍的对手，<br/>
能援救自己的只有清醒和勇敢。</p>

<p>恐惧只能使自己盲目，<br/>
盲目只能夸大魔鬼的狰狞嘴脸；<br/>
也许我的样子比它们更可怕，<br/>
当我以生命相拼，一往无前！</p>

<p>只要我还有一根完整的龙骨，<br/>
绝不驶进避风的港湾；<br/>
把生命放在征途上，<br/>
让勇敢来决定道路的宽窄、长短。</p>

<p>我完完全全的自由了，<br/>
船头成为埋葬它们的铁铲；<br/>
我在波浪中有节奏地跳跃，<br/>
就象荡着一个巨大的秋千。</p>

<p>即使它们终于把我撕碎，<br/>
变成一些残破的木片；<br/>
我不会沉沦，决不！<br/>
我还会在浪尖上飞旋。</p>

<p>后来者还会在残片上认出我，<br/>
未来的诗人会喟然长叹：<br/>
“这里有一个幸福的灵魂，<br/>
它曾经是一艘前进着的航船……”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[偶遇惊天大Bug]]></title>
    <link href="http://ClownQiang.github.io/blog/2015/10/12/oh_bugs/"/>
    <updated>2015-10-12T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2015/10/12/oh_bugs</id>
    <content type="html"><![CDATA[<hr />

<p>这段时间开始尝试使用okhttp，然而不是很顺利遇到了问题，之前一直吧返回来的Response直接在主线程进行解析response.body.string，就这样一个简单的操作一直折腾了我半天，后来在stackoverflow上面才发现原来，这个东西居然是有网络请求的，卧槽，卧槽，卧槽，重要的事情说三遍~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生活的馈赠（二）]]></title>
    <link href="http://ClownQiang.github.io/blog/2015/09/10/life_gift_two/"/>
    <updated>2015-09-10T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2015/09/10/life_gift_two</id>
    <content type="html"><![CDATA[<p>还有什么能比这更好的么，我是说你在年轻的时候想做一件事情，然后你一往无前的去做了，收获了一个满心欢喜的结尾。 （来自豆瓣M_M_TiGeRLinG）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionBar中Menu隐藏后Item无法显示Icon]]></title>
    <link href="http://ClownQiang.github.io/blog/2015/08/10/actionbar_menu_item_not_show_icon/"/>
    <updated>2015-08-10T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2015/08/10/actionbar_menu_item_not_show_icon</id>
    <content type="html"><![CDATA[<hr />

<p>官方中ActionBar如果你隐藏了Menu Item，默认是不会显示Icon。虽然官方不支持，但是有时会使用到相关的效果，所以经过无数次的Google，终于找到了需要的方法和信息。</p>

<p>这个是在CSDN中<a href="http://my.csdn.net/sinyu890807">guolin</a>博主发现的方法，是利用反射来完成的，具体博客地址在<a href="http://blog.csdn.net/guolin_blog/article/details/18234477">这里</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override  
</span><span class='line'>public boolean onMenuOpened(int featureId, Menu menu) {  
</span><span class='line'>    if (featureId == Window.FEATURE_ACTION_BAR && menu != null) {  
</span><span class='line'>        if (menu.getClass().getSimpleName().equals("MenuBuilder")) {  
</span><span class='line'>            try {  
</span><span class='line'>                Method m = menu.getClass().getDeclaredMethod("setOptionalIconsVisible", Boolean.TYPE);  
</span><span class='line'>                m.setAccessible(true);  
</span><span class='line'>                m.invoke(menu, true);  
</span><span class='line'>            } catch (Exception e) {  
</span><span class='line'>            }  
</span><span class='line'>        }  
</span><span class='line'>    }  
</span><span class='line'>    return super.onMenuOpened(featureId, menu);  
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p><strong>但是，但是，但是（重要的事情说三遍）如果你是使用的AppCompactActivity，这里的onMenuOpen可能就不会调用了，至少对于我是这样的</strong></p>

<p>接下来我在stackoverflow上面发现另外的一种解决方法，同样是使用反射来达成效果，但是调用的地方不一样，<strong>如果你是用的是AppCompactActivity</strong>，可以使用下面的方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>protected boolean onPrepareOptionsPanel(View view, Menu menu) {    
</span><span class='line'>    if (menu != null) {       
</span><span class='line'>        if (menu.getClass().getSimpleName().equals("MenuBuilder")) {                                       
</span><span class='line'>            try{
</span><span class='line'>                Method m = menu.getClass().getDeclaredMethod("setOptionalIconsVisible", Boolean.TYPE);                
</span><span class='line'>                m.setAccessible(true);                
</span><span class='line'>                m.invoke(menu, true);            
</span><span class='line'>            } catch (Exception e) {                
</span><span class='line'>            Log.e(getClass().getSimpleName(), "onMenuOpened...unable to set icons for overflow menu", e);           
</span><span class='line'>            }
</span><span class='line'>        }    
</span><span class='line'>    } 
</span><span class='line'>   return super.onPrepareOptionsPanel(view, menu);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>写下来给那些踩到坑的人~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生活的馈赠（一）]]></title>
    <link href="http://ClownQiang.github.io/blog/2015/07/10/life_gift_one/"/>
    <updated>2015-07-10T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2015/07/10/life_gift_one</id>
    <content type="html"><![CDATA[<p>有时自己生活突然失去了目标，我就喜欢在知乎里面看看别人是不是也会有相同的困惑，你也许会称这个为“心灵鸡汤”，可能吧，但是谁也不能否认它可能在某个瞬间给了你生活的一丝信心。</p>

<p>有时我会看到别人推荐的书，我便如获至宝，马上上豆瓣，多看上面看看有没有电子书卖，买下来，放在这里，久而久之，积累的书也就越来越多。或许有人说我这个只是心理上的一中安慰，但是生活不就是如此吗？我们总是在无聊之中给自己一些安慰，让我们相信有些东西还是值得我们去珍惜，值得我们去努力的。</p>

<p>“人生本来就是艰难的”，《少有人走过的路》里面这么说，一旦你真的接受了这一点，你就不会在抱怨生活，所有东西来的都是这么自然，你都可以去欣然接受。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生活的馈赠（序）]]></title>
    <link href="http://ClownQiang.github.io/blog/2015/06/11/life_gift_preface/"/>
    <updated>2015-06-11T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2015/06/11/life_gift_preface</id>
    <content type="html"><![CDATA[<p>到了现在这个年龄，人总是喜欢胡思乱想，有时我都猜不透自己，总是想象自己到底需要什么样的生活，但是却不得而知。有时感觉生活给人最残忍的不是碌碌无为，而是给你对于未来的无限憧憬，但是在某一个瞬间突然将其打破。</p>

<p>有一次看《一席》中老树画画先生的演讲，他提到“中国人的哲学不是要他成为什么样的人，而是使其成为人”，听到这里我感到震撼。对于生活，每个人都有自己独特的生活方式，所以我有时会对于生活有些奇奇怪怪的想法，也许零零碎碎，也许不够全面，但是我想把他们整理起来，也许将来可以用的到。</p>

<p>这里开了一个新的文集，叫《生活的馈赠》，将这些想法整理起来，也许就是生活的礼物。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“何书还”之二（关于Animation使用）]]></title>
    <link href="http://ClownQiang.github.io/blog/2014/12/28/he_shu_huan_Num_Two_Animation/"/>
    <updated>2014-12-28T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2014/12/28/he_shu_huan_Num_Two_Animation</id>
    <content type="html"><![CDATA[<hr />

<p><a href="http://developer.android.com/training/material/animations.html">官方介绍Animation使用</a></p>

<p>我看了一下官方文档，但是无奈我的理解能力不够好，跑了好多次还是看不见炫酷的动画效果，无奈只好去翻阅官方demo的源码，终于知道了怎么使用。</p>

<h4>Touch Feedback（触摸反馈）</h4>

<p>在XML文件中添加以下代码可以添加触摸反馈的动画效果（类似于涟漪的效果）
&ndash; <em>?android:attr/selectableItemBackground</em>（有边界，可以使用在listview的item上）
&ndash; <em>?android:attr/selectableItemBackgroundBorderless</em>（没有边界，或者直接看是看不到明显的边界，但是点击是有涟漪效果）
<strong>需要说明<em>android:attr/selectableItemBackgroundBorderless</em>是API 21新增加的</strong></p>

<h4>Circular Reveal</h4>

<p>这个主要是提供一个圆形的显示或者隐藏的动画效果，主要使用的api是<a href="http://developer.android.com/reference/android/view/ViewAnimationUtils.html#createCircularReveal(android.view.View,%20int,%20int,%20float,%20float">ViewAnimationUtils.createCircularReveal()</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// previously invisible view
</span><span class='line'>View myView = findViewById(R.id.my_view);
</span><span class='line'>
</span><span class='line'>// get the center for the clipping circle
</span><span class='line'>int cx = (myView.getLeft() + myView.getRight()) / 2;
</span><span class='line'>int cy = (myView.getTop() + myView.getBottom()) / 2;
</span><span class='line'>
</span><span class='line'>// get the final radius for the clipping circle
</span><span class='line'>int finalRadius = Math.max(myView.getWidth(), myView.getHeight());
</span><span class='line'>
</span><span class='line'>// create the animator for this view (the start radius is zero)
</span><span class='line'>Animator anim =
</span><span class='line'>    ViewAnimationUtils.createCircularReveal(myView, cx, cy, 0, finalRadius);
</span><span class='line'>
</span><span class='line'>// make the view visible and start the animation
</span><span class='line'>myView.setVisibility(View.VISIBLE);
</span><span class='line'>anim.start();</span></code></pre></td></tr></table></div></figure>


<p>里面几个参数的意思分别为：
&ndash; myView 要展示动画效果的视图
&ndash; cx  动画开始的X坐标
&ndash; cy 动画开始的Y坐标
&ndash; startRadius 动画开始的角度
&ndash; finalRadius 动画结束的角度</p>

<h4>Activity Transitions</h4>

<p>关于这个我就不多写了，博主大苞米对于这个写的十分详细，给大家附上链接自己<a href="http://blog.csdn.net/a396901990/article/details/40187203">看一下</a>,我就Activity之间的视图共享写一下，因为我在这个地方花了一些时间，所以记下来以备后面忘记。</p>

<p>首先需要在XML文件中你需要共享的View定义一个<code>android:transitionName</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ImageView
</span><span class='line'>                android:id="@+id/bookPage"
</span><span class='line'>                android:layout_width="match_parent"
</span><span class='line'>                android:layout_height="400dp"
</span><span class='line'>                android:scaleType="centerCrop"
</span><span class='line'>                android:tint="@color/photo_tint"
</span><span class='line'>                android:transitionName="bookPage" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>然后可以定义动画效果：</p>

<p><strong>1.可以在style文件中定义</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;item name="android:windowContentTransitions"&gt;true&lt;/item&gt;  
</span><span class='line'>&lt;item name="android:windowEnterTransition"&gt;@transition/explode&lt;/item&gt;  
</span><span class='line'>&lt;item name="android:windowExitTransition"&gt;@transition/explode&lt;/item&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>2.可以在java文件中定义</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);  
</span><span class='line'>getWindow().setExitTransition(new Explode());  </span></code></pre></td></tr></table></div></figure>


<p>然后在使用Intent跳转的时候，加入ActivityOptions</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Intent intent = new Intent(this, Activity2.class);  
</span><span class='line'>// shareView: 需要共享的视图  
</span><span class='line'>// bookPage就是刚刚 transitionName所写的值
</span><span class='line'>ActivityOptions options = ActivityOptions  
</span><span class='line'>        .makeSceneTransitionAnimation(this, shareView, "bookPage");  
</span><span class='line'>startActivity(intent, options.toBundle());</span></code></pre></td></tr></table></div></figure>


<p>对于一次共享多个View的需要使用Pair.create(view,&ldquo;shareName&rdquo;)，这里必须是View。</p>

<p>关于结束Activity时同样动画效果倒回可以使用Activity.finishAfterTransition()。</p>

<h4>添加TranstionListener</h4>

<p>同样你可以在进入动画时候添加动画监听器，这样你就可以在本页面加载更多的动画效果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getWindow().getEnterTransition().addListener(new TransitionAdapter() {
</span><span class='line'>                @TargetApi(Build.VERSION_CODES.LOLLIPOP)
</span><span class='line'>                @Override
</span><span class='line'>                public void onTransitionEnd(Transition transition) {
</span><span class='line'>                    ObjectAnimator color = ObjectAnimator.ofArgb(bookPage.getDrawable(), "tint",
</span><span class='line'>                            getResources().getColor(R.color.photo_tint), 0);
</span><span class='line'>                    color.start();
</span><span class='line'>                    renewButton.animate().scaleX(1.0f);
</span><span class='line'>                    renewButton.animate().scaleY(1.0f);
</span><span class='line'>                    renewButton.animate().alpha(1.0f);
</span><span class='line'>                    getWindow().getEnterTransition().removeListener(this);
</span><span class='line'>                }
</span><span class='line'>            });</span></code></pre></td></tr></table></div></figure>


<p>关闭Activity时同样可以使用，需要重写onBackPressed()方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>    public void onBackPressed() {
</span><span class='line'>        super.onBackPressed();
</span><span class='line'>        if (Build.VERSION.SDK_INT == 21) {
</span><span class='line'>            ObjectAnimator color = ObjectAnimator.ofArgb(bookPage.getDrawable(), "tint",
</span><span class='line'>                    0, getResources().getColor(R.color.photo_tint));
</span><span class='line'>            color.addListener(new AnimatorListenerAdapter() {
</span><span class='line'>                @Override
</span><span class='line'>                public void onAnimationEnd(Animator animation) {
</span><span class='line'>                    finishAfterTransition();
</span><span class='line'>                }
</span><span class='line'>            });
</span><span class='line'>            color.start();
</span><span class='line'>            renewButton.animate().scaleX(0.0f);
</span><span class='line'>            renewButton.animate().scaleY(0.0f);
</span><span class='line'>            renewButton.animate().alpha(0.0f);
</span><span class='line'>            finishAfterTransition();
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“何书还”之一（Material Design小试）]]></title>
    <link href="http://ClownQiang.github.io/blog/2014/12/27/he_shu_huan_Num_One/"/>
    <updated>2014-12-27T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2014/12/27/he_shu_huan_Num_One</id>
    <content type="html"><![CDATA[<hr />

<p>很长一段时间没有写过文章了，这次赶上学校办的“手机应用开发大赛”，做了一个小小的App，带着尝试一下的心态，我选择了Google最新的Material Design，无奈能找到的资料太少，花了一段时间去网上淘各种资料，这里我就这个App做一下总结。</p>

<p>先上一些找到的资料：</p>

<p><a href="http://developer.android.com/training/material/theme.html">Material Design</a>官方介绍，英文和理解能力够好，直接看官方文档</p>

<p><a href="http://blog.isming.me/">博主Sam</a>作为一个吃螃蟹的人，也做了一些对于Material Design的尝试，也写了一些文章，大家也可以去看看。</p>

<p><a href="http://blog.csdn.net/a396901990/article/details/40107881">csdn博主大苞米</a>同样也写了一些关于Material Design的文章</p>

<p><a href="https://github.com/lightSky/MaterialDesignCenter">MaterialDesignCenter</a> 这个整理的很完善，这里就不在分开上链接。</p>

<p><a href="https://github.com/1019439568/MMLibrary">何书还</a> 是我写的一个图书馆查询工具App，也尝试了Material Design</p>

<p>具体详细信息，大家可以上<a href="https://github.com/lightSky/MaterialDesignCenter">MaterialDesignCenter</a> 中看看其他人时怎么做的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidStudio坑爹错误之一]]></title>
    <link href="http://ClownQiang.github.io/blog/2014/12/26/Android_Studio_Bug_Num_One/"/>
    <updated>2014-12-26T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2014/12/26/Android_Studio_Bug_Num_One</id>
    <content type="html"><![CDATA[<hr />

<p>前段时间被这个坑爹错误折腾了好长时间，废话不多说直接把它拉出来枪毙~~~~</p>

<h3>错误信息</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UNEXPECTED TOP-LEVEL EXCEPTION:
</span><span class='line'>com.android.dx.cf.iface.ParseException: class name (com/companyname/UI/BuildConfig) does not match path (com/companyname/ui/BuildConfig.class) at </span></code></pre></td></tr></table></div></figure>


<h3>解决方案</h3>

<ul>
<li>AndroidStudio clean项目，rebuild项目</li>
</ul>


<p>你没有看错就是这么简单，但是你可能在logcat里面看到其他信息，比如这个：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UNEXPECTED TOP-LEVEL EXCEPTION</span></code></pre></td></tr></table></div></figure>


<p>如果你将这个信息Google一下，就会发现，有各种各样的方案，比如说有重复编译jar包等等，我们不排除有这个可能。</p>

<p>所以如果碰上上面的问题，可以先clean，rebuild的尝试一下先~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[来吧，Android Studio]]></title>
    <link href="http://ClownQiang.github.io/blog/2014/10/23/come_on_Android_Studio/"/>
    <updated>2014-10-23T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2014/10/23/come_on_Android_Studio</id>
    <content type="html"><![CDATA[<hr />

<p>对于很多写android初次使用的ADT便是eclipse，这货功能十分强大，主要归功于它的各种强大的插件，即使我先后使用了Intellij Idea，Android Studio也没有把eclipse丢掉，因为里面各种插件让我放不下。</p>

<p>使用了一年的Intellij IDEA后，Google发布了新的ADT&mdash;-Android Studio，开始对他完全无爱，使用过Intellij IDEA的都知道，Android Studio就是 IDEA的翻版，但是随着Android Studio的不断完善，配合上强大的Gradle，关于Gradle是什么，可以简单介绍一下。</p>

<h2>Gradle(以下来自<a href="http://www.gradle.org">官网</a>)</h2>

<blockquote><p>Gradle is build automation evolved. Gradle can automate the building, testing, publishing, deployment and more of software packages or other types of projects such as generated static websites, generated documentation or indeed anything else.</p></blockquote>

<p>Gradle是自动化构建工具。Gradle可以自动构建，测试，发布，部署软件包或其他类型的项目，如生成静态网站，生成的文档或实际上任何东西。简单的说有了Gradle你的项目依赖再也不是难题了。</p>

<p>更加详细可以直接戳<a href="http://baike.baidu.com/view/9916271.htm?fr=aladdin">百度百科</a>或者<a href="http://en.wikipedia.org/wiki/Gradle">Wikipedia</a></p>

<h2>为什么使用Android Studio</h2>

<p>众所周知，习惯了一个ADT，如果更改会十分的麻烦，不仅开始效率不高，而且可能换了之后效率还是没有变化。随着我们看见Android Studio的不断更新，我们发现Google是想将其打造成为一个类似XCode的专属ADT。而且里面添加的功能也不再是eclipse的几个插件能够替代的。</p>

<h3>好用XML即时UI展示</h3>

<p>没图我说个QB
<img src="http://clownqiang.qiniudn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202014-09-13%20%E4%B8%8B%E5%8D%884.09.26.png" alt="XML编辑UI同步展示" />
看见这个是不是感觉终于解放了，再也不用Tab边写边看UI了。更加省心的是，大家都知道android有多种分辨率，如果要看在其他分辨率的手机上面的显示效果，你只需要在右边更换你需要的手机分辨就可以看到，方便的不是一点点。</p>

<h3>更加方便的新文件创建</h3>

<p><img src="http://clownqiang.qiniudn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202014-09-13%20%E4%B8%8B%E5%8D%884.28.09.png" alt="文件创建的细化" />
过去在eclipse上面我们只能创建XML，java文件等非常局限，现在在Android Studio可以创建的文件细化到了每个组件，不仅有熟悉的Fragment，Activity，Service还有Google相关服务，是不是很方便，再也不用在eclipse的AndroidManifast中手动添加Activty和Service了</p>

<h3>更加好的性能和使用体验</h3>

<p>过去eclipse经常出现的无响应，莫名的红色小叉号。。。这些都成为历史，现在Android Studio不仅性能比以前更好，不会出现风扇狂转的现象，而且更加稳定。智能的提示也是使用Android Studio的一大优势，非比寻常的提示速度是其他ADT无法达到的。</p>

<h3>插件管理更加方便</h3>

<p><img src="http://clownqiang.qiniudn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202014-09-13%20%E4%B8%8B%E5%8D%884.36.22.png" alt="插件管理" />
虽然没有eclipse那么多的插件，但是拥有非常方便的插件管理，只需要点一点就可以下载你需要的插件，同时有git和svn，代码的管理也是相当方便。</p>

<h3>新的Google开发集成</h3>

<p>更好以及更快的体验Google新推开发SDK，刚刚推出的Android Wear以及Android TV和新的Android L已经开发尝试，无疑使用官方推出的ADT肯定能更好的尝试这些新东西。</p>

<h2>来吧Android Studio！！！</h2>

<p><a href="https://developer.android.com/sdk/installing/studio.html">Android Studi官方下载</a> 可能下载的速度很慢，原因大家都懂得，具体方法还是百度吧！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellij IDEA修改包名]]></title>
    <link href="http://ClownQiang.github.io/blog/2014/10/22/Intellij_IDEA_verify_package_name/"/>
    <updated>2014-10-22T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2014/10/22/Intellij_IDEA_verify_package_name</id>
    <content type="html"><![CDATA[<hr />

<p>1.首先将AndroidManifest的Package Name重命名（快捷键shift+F6或者右键Refctor然后Rename）这时Package Name就改变了，但是Src的文件名还没变
2.如果修改Src文件名，可以用同样的方法修改AndroidManifest中activity的命名。具体过程下面示范：</p>

<h4>修改前</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    package="com.nostra13.universalimageloader.sample"
</span><span class='line'>    android:versionCode="39"
</span><span class='line'>    android:versionName="1.9.4" &gt;
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>    &lt;application
</span><span class='line'>        android:name=".UILApplication"
</span><span class='line'>        android:icon="@drawable/ic_launcher"
</span><span class='line'>        android:label="@string/app_name"
</span><span class='line'>      android:allowBackup="false"&gt;
</span><span class='line'>        &lt;activity
</span><span class='line'>            android:name=".activity.HomeActivity"
</span><span class='line'>            android:label="@string/app_name" &gt;
</span><span class='line'>            ...
</span><span class='line'>        &lt;/activity&gt;
</span><span class='line'>     &lt;/application&gt;
</span><span class='line'>&lt;/manifest&gt;</span></code></pre></td></tr></table></div></figure>


<h4>修改package</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    package="com.clownqiang.test.sample"  //这里修改为
</span><span class='line'>    android:versionCode="39"
</span><span class='line'>    android:versionName="1.9.4" &gt;
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>    &lt;application
</span><span class='line'>        android:name=".UILApplication"
</span><span class='line'>        android:icon="@drawable/ic_launcher"
</span><span class='line'>        android:label="@string/app_name"
</span><span class='line'>      android:allowBackup="false"&gt;
</span><span class='line'>        &lt;activity
</span><span class='line'>            android:name="com.nostra13.universalimageloader.activity.HomeActivity"  //package修改时，src文件名不变，所以这里的.activity.HomeActivity变为绝对路径
</span><span class='line'>            android:label="@string/app_name" &gt;
</span><span class='line'>            ...
</span><span class='line'>        &lt;/activity&gt;
</span><span class='line'>     &lt;/application&gt;
</span><span class='line'>&lt;/manifest&gt;</span></code></pre></td></tr></table></div></figure>


<h4>修改activity的命名，同时修改src</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    package="com.clownqiang.test.sample"  
</span><span class='line'>    android:versionCode="39"
</span><span class='line'>    android:versionName="1.9.4" &gt;
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>    &lt;application
</span><span class='line'>        android:name=".UILApplication"
</span><span class='line'>        android:icon="@drawable/ic_launcher"
</span><span class='line'>        android:label="@string/app_name"
</span><span class='line'>        android:allowBackup="false"&gt;
</span><span class='line'>        &lt;activity
</span><span class='line'>            android:name="com.clownqiang.universalimageloader.activity.HomeActivity"  //这里将光标移至原来的nostra13，然后rename为clownqiang，然后同样方法再修改universalimageloader，最后完成
</span><span class='line'>            android:label="@string/app_name" &gt;
</span><span class='line'>            ...
</span><span class='line'>        &lt;/activity&gt;
</span><span class='line'>     &lt;/application&gt;
</span><span class='line'>&lt;/manifest&gt;</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    package="com.clownqiang.test.sample"  
</span><span class='line'>    android:versionCode="39"
</span><span class='line'>    android:versionName="1.9.4" &gt;
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>    &lt;application
</span><span class='line'>        android:name=".UILApplication"
</span><span class='line'>        android:icon="@drawable/ic_launcher"
</span><span class='line'>        android:label="@string/app_name"
</span><span class='line'>        android:allowBackup="false"&gt;
</span><span class='line'>        &lt;activity
</span><span class='line'>            android:name=".activity.HomeActivity"  //这里就是 android:name＝"com.clownqiang.test.sample.activity.HomeActivity"
</span><span class='line'>            android:label="@string/app_name" &gt;
</span><span class='line'>            ...
</span><span class='line'>        &lt;/activity&gt;
</span><span class='line'>     &lt;/application&gt;
</span><span class='line'>&lt;/manifest&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Ok,完成啦</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android第三方平台分享集成挖坑（Umeng篇）]]></title>
    <link href="http://ClownQiang.github.io/blog/2014/09/23/Android_Share_Umeng/"/>
    <updated>2014-09-23T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2014/09/23/Android_Share_Umeng</id>
    <content type="html"><![CDATA[<hr />

<p>关于android中的第三方平台接入一直是一个让人又爱又恨的东西，令人应接不暇的各种平台都说自己整合的好，方便，但是着手用了之后，各种问题都来。网上一般看到最多的移动开发者服务平台有友盟，ShareSDK，以及Avos Cloud，这几个平台我都有使用过，都有自己的优缺点，这个就最近使用的Umeng来进行一点坑的挖掘。</p>

<p>关于Umeng，就它的对功能的整合程度，已经算是很不错的了，常见的第三方平台都能看见，具体的怎么使用就不用说了，文档可以直接<a href="http://dev.umeng.com/social/android/share/quick-integration">戳这里</a>。</p>

<h3>下面我主要说一下我遇到的坑</h3>

<h4>1.关于人人网一直显示invalid redirect_ui</h4>

<blockquote><p>如果你是使用的Umeng作为集成SDK，官方说要填写正确的redirect_uri，但是这样问题是无法解决的，这里要将应用的基本信息中的根域名设置为<em> sns.whalecloud.com</em></p></blockquote>

<h4>2.关于QQ空间分享中的网址链接到Umeng</h4>

<blockquote><p>这个是Umeng的默认，这里需要设置 QZoneShareContent的setTargetUrl这里的Url设置为你想跳转的网址即可</p></blockquote>

<h4>3.为什么我的微信分享怎么点都没有反应，既不报错也不出现分享窗口</h4>

<blockquote><p>这个最可能的问题就是你没有设置好微信平台上的包名以及应用签名，好好看一下签名，直接从IDE上面装到手机上与签名打包后的签名是不一样的</p></blockquote>

<h4>4.代码混淆后出错(下面的摘自Umeng的常见问题，也写在这儿)</h4>

<blockquote><p>一般我们使用分享可以看见Umeng提供的混淆代码，但是如果你还使用Umeng提供的其他功能，这些代码就不能完全帮到你了。你可能需要下面的：</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-keepclassmembers class * {
</span><span class='line'>   public &lt;init&gt;(org.json.JSONObject);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-keep public class [您的应用包名].R$*{
</span><span class='line'>    public static final int *;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>把[您的应用包名] 替换成您自己的包名，如com.yourcompany.example。如果您使用5.0.0及以上版本的SDK，请添加如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-keepclassmembers enum * {
</span><span class='line'>    public static **[] values();
</span><span class='line'>    public static ** valueOf(java.lang.String);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>5.腾讯开放平台申请时千万注意申请的是什么</h4>

<blockquote><p>如果是游戏，请注意你的包名，腾讯为了保障自己的利益，包名统一为com.tencent.tmgp.XXXX，如果在你代码写完准备上架，发现包名不对，不仅仅麻烦，而且繁琐的过程十分影响心情。这里如果你的软件都是简单的只想集合QQ分享功能的，建议为软件，这样可以省去很多的事情。</p></blockquote>

<h3>关于修改包名，看Intellij IDEA修改包名</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于XX网Android客户端开发发现的问题]]></title>
    <link href="http://ClownQiang.github.io/blog/2014/09/13/xx_Android_App_Bug/"/>
    <updated>2014-09-13T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2014/09/13/xx_Android_App_Bug</id>
    <content type="html"><![CDATA[<hr />

<h3>手机拍照上传</h3>

<p>如果在Fragment中调用拍照，直接用startActivityForResult，不要加上getActivity，同时还有在onActivityResult中关于拍照上传要注意使用resultCode，判断取消状态</p>

<h3>关于使用shape花虚线出现实线</h3>

<p>这个问题折腾一段时间，发现这个是一个系统的bug，只要将layer-type设置为software即可</p>

<h3>关于EditText默认不弹出软件</h3>

<p>这里有多种方法，这里说的方法，是EditText不获取到焦点的，有的方法是EditText获取了焦点的但是没有弹出而已。这里说的就是，将EditText的直接父级空间设置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>android:focusable="true"
</span><span class='line'>android:focusableInTouchMode="true"</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于在Mac OS X使用NDK（入门级）]]></title>
    <link href="http://ClownQiang.github.io/blog/2014/09/10/About_Mac_OS_X_NDK/"/>
    <updated>2014-09-10T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2014/09/10/About_Mac_OS_X_NDK</id>
    <content type="html"><![CDATA[<hr />

<h3>下载Mac OS X版本的NDK</h3>

<p>在android官网NDK页面可以看到相关信息，可以<a href="http://developer.android.com/tools/sdk/ndk/index.html">戳这里</a>，进入这个页面可以看见下载版本分为两个，一个为32-bit，一个为64-bit，到底怎么看，可以再终端输入uname -v，如果出现RELEASE_X86_64，表示为64-bit，如果不清楚，可以<a href="http://www.cnblogs.com/wanyakun/archive/2012/02/24/3403288.html">戳这里</a></p>

<h3>准备JNI</h3>

<ul>
<li>新建一个AndroidApplication Project，命名为HelloNDK，并在其工程根目录下手动建一个jni目录,在其目录下创建一个Android.mk编译配置文件和hello-ndk.c源文件。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Android.mk
</span><span class='line'>
</span><span class='line'>LOCAL_PATH := $(call my-dir)  
</span><span class='line'>include $(CLEAR_VARS)  
</span><span class='line'>LOCAL_MODULE    := hello-ndk  
</span><span class='line'>LOCAL_SRC_FILES := hello-ndk.c  
</span><span class='line'>include $(BUILD_SHARED_LIBRARY)  </span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hello-ndk.c
</span><span class='line'>
</span><span class='line'>#include &lt;string.h&gt;  
</span><span class='line'>#include &lt;jni.h&gt;    
</span><span class='line'>jstring Java_com_example_HelloNDK_MyActivity_stringFromJNI(JNIEnv* env, jobject thiz)  
</span><span class='line'>{  
</span><span class='line'>  return (*env)-&gt;NewStringUTF(env, "Hello from JNI!");  
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p>在这里jsstring后面Jave_com_example_HelloNDK（这个是包名），stringFromJNI是方法名</p>

<ul>
<li>编译文件将下载NDK包解压到指定位置，将路径加入到.bash_profile（或者使用zsh为.zshrc），到project的jni目录下，使用命令ndk-build，如果成功会出现以下文字</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[armeabi] Compile thumb  : hello-ndk &lt;= hello-ndk.c
</span><span class='line'>[armeabi] SharedLibrary  : libhello-ndk.so
</span><span class='line'>[armeabi] Install        : libhello-ndk.so =&gt; libs/armeabi/libhello-ndk.so</span></code></pre></td></tr></table></div></figure>


<h3>在java文件中引用JNI</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MyActivity.java
</span><span class='line'>
</span><span class='line'>package com.example.HelloNDK;//包名
</span><span class='line'>
</span><span class='line'>import android.app.Activity;
</span><span class='line'>import android.os.Bundle;
</span><span class='line'>import android.widget.TextView;
</span><span class='line'>
</span><span class='line'>public class MyActivity extends Activity {
</span><span class='line'>  /**
</span><span class='line'>  * Called when the activity is first created.
</span><span class='line'>  */
</span><span class='line'>  @Override
</span><span class='line'>      public void onCreate(Bundle savedInstanceState) {
</span><span class='line'>          super.onCreate(savedInstanceState);
</span><span class='line'>
</span><span class='line'>      TextView textView = new TextView(this);
</span><span class='line'>      textView.setText(stringFromJNI());
</span><span class='line'>      setContentView(textView);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public native String stringFromJNI();
</span><span class='line'>  public native String unimplementedStringFromJNI();
</span><span class='line'>
</span><span class='line'>  static {
</span><span class='line'>      System.loadLibrary("hello-ndk");
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>注意：Java代码中使用native关键字标示方法是JNI库中的函数，虽然上一步编译出来的JNI库的名字是libhello-ndk.so，但是按照规范，System.loadLibrary中的参数是去掉lib和.so的。</p>

<h2>如果运行程序出现Hello from JNI!表示成功了，骚年！！！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于某外包开发心得]]></title>
    <link href="http://ClownQiang.github.io/blog/2014/05/26/sxsummary/"/>
    <updated>2014-05-26T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2014/05/26/sxsummary</id>
    <content type="html"><![CDATA[<p>前段时间开发了人生的第一个外包App，相对平时做的一些App，有了一定的压力，而且有了更高的要求，不仅仅要有功能上的实现，而且有了更多其他的要求，比如手机的适配，包工头改不完的要求，以及无良android商家对android的修改，比如某米，简直无力吐槽。最后统计java代码量达到了9991行，虽然java比较繁琐，而且我们技术有限，接口以及代码复用做的不太好，但是对于我们还是一个比较大的项目，然而关于这样一个项目是怎么样生成的，希望能给到大家一点启示。</p>

<h3>项目功能的初步建模</h3>

<p>一个比较大的项目，不管是外包，还是自己想做的，都会有一个大概的功能框架，虽然说做出模型图片，不是程序员的任务，但是通过这次项目，我深深的认识到，一个android的原型图，至少应该派一个程序员与美工(UI设计师~)进行交流，不然他们设计出来的菜单等级，以及酷炫的风格会让你蛋疼无比，然后还会丢下一句“说这么多干什么，不就是做不出来吗？”，为了你的代码难度在你的一定掌握范围内，所以一个靠谱的任必须去和美工一起定原型图，这个非常重要，因为android是没有做到绝对的界面与代码分离，而且基本上美工不懂android布局，所以他们完全不能认识到设计出来的布局到底有多大的难度，这是我遇到的第一个坑。。。</p>

<h3>项目功能的考究</h3>

<p>终于解决了基本模型的问题，接下来就是功能，无论你是做什么样的软件，功能是离不开的，举个例子，“掌上南邮”我虽然没有参与做，但是看到这个软件，大家都会知道功能有哪些，比如进入界面有个天气预报，用了webservice，接下来的图书馆，用了android中http传输信息然后jsoup爬取图书馆信息，等等。对这些功能做了基本分析，可以将这些技术点分个类，较简单，难，很难，这样你的侧重点，当然还有开发中可能遇到的坑，不要小瞧这一点，一个坑可以让你白忙活一天，还有太难的地方必须有一定的规划，不然就不只是浪费时间了。</p>

<h3>项目页面分配</h3>

<p>这个也是一个问题，现在做android应用，人多会有，项目结合以及理解性的偏差，所以我的建议是，“能一个人做的不要两个人”，这个真的是很重要，人多力量大主要体现在搬砖，在这里人越少你的代码的统一性更能体现，而且很多的地方都在你的控制范围内，比如数据方法封装。。。但是要两个人或者更多了，这个时候 <a href="https://www.github.com">github</a>, <a href="https://trello.com">trello</a>等作为团队合作的神器就来了，更重要的是分配任务时要注意尽量将粘合度比较低的界面分离出去。关于工具类以及接口的整合，我觉得可以先几个人用自己的类写，然后重构时再合到一起，或者还可以让一个比较靠谱的人去写工具类，注意要比较靠谱，因为他的速度要能跟上其他人的速度，为他们提供方法和接口。</p>

<h3>项目工程的建立</h3>

<p>大家终于要告别一个com.example.Hello写完全部类的时代了，一个好的工程目录可以清晰的看出这个项目的结构，一般不要以com.example中的example因为你提交你的android app到应用市场，他会读出你的包名，如果是example有的是不会接受的。</p>

<p>举个项目目录例子：</p>

<pre><code>org.clownxiaoqiang.test
├── adapter
├── util    
├── widget
├── model     
└── ui
    ├── flash
    ├── home     
    ├── shop
    ├── me
    └── more
</code></pre>

<p>大家看到的这个例子，分了很多的目录其实还不算标准，在ui下面有了很多，这个就是我们看到的各种界面，一个大的集合为一个，这样不同人在开发时就不会干扰，而且很有序，其实一开始工作做好了，后面的代码重构会简单很多，这里有一个个人开发的 <a href="https://github.com/gonjay/rubychina4android">rubychina4android</a>android app，大家可以看下他的工程目录，学习一下。</p>

<h3>后记</h3>

<p>一个好的写代码习惯也是非常重要的，比如命名，减少冗余代码等，不要小瞧任何一点，同时不要受身边的人干扰，不要认为写android就会低端很短，如果你能在这条路上做到极致，你也是牛X的，如果再有人对你炫耀他是做底层的，你就把手机丢他脸上，让他自己写app装上去。还有，一个靠谱的包工头，简直太TM重要了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[马上码代码]]></title>
    <link href="http://ClownQiang.github.io/blog/2014/02/22/code_now/"/>
    <updated>2014-02-22T00:00:00+08:00</updated>
    <id>http://ClownQiang.github.io/blog/2014/02/22/code_now</id>
    <content type="html"><![CDATA[<h3><a href="https://github.com/1019439568">ClownQiang</a>—————一只屌丝程序员</h3>

<hr />

<p>第一次为俱乐部写一篇博客，关于技术上面确实懂得太少，说的太多可能会使大家误入歧途，不过 <a href="https://github.com/oa414">oa414</a>将这个任务交给了我，我还是得认真完成。下面就我来移动MM俱乐部的半年里的感受与体会与大家讲讲，对于我这种低端水平的人怎么去写一个android应用。</p>

<p>刚进俱乐部，就碰上了google大学生开发大赛，这个对于我来说是比较正式的参加校外比赛，虽然技术不怎么样，但是屌丝都有一个高富帅的心，同为屌丝的涛哥和我一起组成了一队。刚好那时看到一个计时类应用，是利用手指的滑动进行时间的记入，很有创意。所以就萌生了开发TimeNote的想法，但是开发的决定过程是很漫长，因为不知道手指滑动记入时间到底怎么实现的，我们陷入一种怪圈子：</p>

<p>他说：“小强，这个太复杂了，感觉实现有点困难，要不我们换成其他计时。”</p>

<p>我说：“我们的这个应用的新意就在这儿。。”</p>

<p>他说：“怎么实现”</p>

<p>我说：“balabalabala。。。”</p>

<p>他说：“balabalabala。。。” 。。。。</p>

<p>然后还是没有结果，同样的现象还发生在后来校科技节中的android开发比赛，为了开发一些比较具有玩乐价值的应用，当时有这样两个选择： <a href="http://as.baidu.com/a/item?docid=5078477">真心话大冒险</a>与谁是卧底, 因为真心话大冒险是我与学姐胡雪茜开发的，所以就以这个为例子。按照惯例，开发之前又是一阵头脑风暴，在学姐“美好”的畅想中，我们的应用 <a href="http://as.baidu.com/a/item?docid=5078477">真心话大冒险</a>具有了很多炫的功能，不仅有微信摇一摇功能，还有酷比的阴影旋转效果，但是对于我这种战5水平完全无法实现，“摇一摇”勉强可以实现，但是阴影对于我来说就太什么了点，为了有个好的规划，又开始了激烈的讨论，一个晚上过去了，她的UI界面没出来，我的 <a href="http://zh.wikipedia.org/wiki/GitHub">github</a>仓库都没建立。</p>

<p>上面举了两个例子无非是想告诉大家，说的再多也抵不过动手去做，规划固然重要，但是如果拿着规划的幌子去正大光明的浪费时间就只能”呵呵“了。当你要去开发一个软件时，能做的事情很多，而不是用嘴巴去写代码，如果你还是那个开口就是要开发 <a href="http://zh.wikipedia.org/wiki/%E5%A4%A7%E5%9E%8B%E5%A4%9A%E4%BA%BA%E5%9C%A8%E7%BA%BF%E8%A7%92%E8%89%B2%E6%89%AE%E6%BC%94%E6%B8%B8%E6%88%8F">MMORPG</a>，或者开发Whatsapp大赚190亿美元，但是又不怎么去做实际事情，那我必须再打击一下你。</p>

<p>记得临近期末曾经有个人来找过我们，他有个十分新颖的想法，是关于XX的改良版，“balabalabala”说了一大堆后，说自己基本“万事具备，只欠软件”，听完了oa414“呵呵“一笑，表示”too young，young simple“，在中国这个十几亿的大国，这样或者那样想法每天都不缺，所以如果想以一个想法达到那样的高度是不太合适的。如果你是一个程序员，就应该认真的去看看计算机方面的书;如果你是一个UI设计师，那么就学会用各种可视化布局工具，如： <a href="http://www.bootcss.com/p/layoutit/">LayoutIt</a>， <a href="http://www.bootcss.com/p/bootstrap-wysiwyg/">bootstrap-wysiwyg</a>等等，而不是会做几张图片就谈什么深入群众，“步子太大，小心扯淡”。</p>

<p>今天说的东西不多，作为开学的Blog我表示责任重大，所以在新的学期不要用调戏妹子的言语勾搭计算机，它不吃这一套，所以在你真的想学的时候多去干点实实在在的事情，让自己充实。</p>

<p>哪些想学游戏的，马上看看游戏方面的书，以及自己动手开发小的游戏。。。。。。。</p>

<p>哪些想学IOS的，马上找找翔宇“学长”。。。。。。。</p>

<p>哪些想学UI，马上储备能用实际技能，注意你不是PS怪。。。。。。。。。。。</p>

<p>哪些正在扯淡的，马上码代码吧。。。。。。。。。</p>

<h3>最后附上各种程序在Github上的链接：</h3>

<ul>
<li><a href="https://github.com/1019439568/TimeNote">TimeNote</a></li>
<li><a href="https://github.com/1019439568/Truth-or-Dare">真心话大冒险</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
